name: Terraform CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ github.ref == 'refs/heads/dev' && 'dev' || 'default' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ env.TF_WORKSPACE }}/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Set environment variables for Terraform
        id: set_env_vars
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "MY_IP=${{ secrets.TF_VAR_my_ip_dev }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.TF_VAR_db_name_dev }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.TF_VAR_db_username_dev }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.TF_VAR_db_password_dev }}" >> $GITHUB_ENV
            echo "VPC_CIDR=${{ secrets.TF_VAR_vpc_cidr_dev }}" >> $GITHUB_ENV
            echo "SUBNET_CIDRS=${{ secrets.TF_VAR_subnet_cidrs_dev }}" >> $GITHUB_ENV
            echo "AVAILABILITY_ZONES=${{ secrets.TF_VAR_availability_zones_dev }}" >> $GITHUB_ENV
            echo "INSTANCE_TYPE=${{ secrets.TF_VAR_instance_type_dev }}" >> $GITHUB_ENV
          else
            echo "MY_IP=${{ secrets.TF_VAR_my_ip_default }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.TF_VAR_db_name_default }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.TF_VAR_db_username_default }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.TF_VAR_db_password_default }}" >> $GITHUB_ENV
            echo "VPC_CIDR=${{ secrets.TF_VAR_vpc_cidr_default }}" >> $GITHUB_ENV
            echo "SUBNET_CIDRS=${{ secrets.TF_VAR_subnet_cidrs_default }}" >> $GITHUB_ENV
            echo "AVAILABILITY_ZONES=${{ secrets.TF_VAR_availability_zones_default }}" >> $GITHUB_ENV
            echo "INSTANCE_TYPE=${{ secrets.TF_VAR_instance_type_default }}" >> $GITHUB_ENV
          fi

      - name: Debug Secrets
        run: |
          echo "MY_IP: ${{ secrets[format('TF_VAR_my_ip_{0}', env.TF_WORKSPACE)] }}"
          echo "SUBNET_CIDRS: ${{ secrets[format('TF_VAR_subnet_cidrs_{0}', env.TF_WORKSPACE)] }}"
          echo "AVAILABILITY_ZONES: ${{ secrets[format('TF_VAR_availability_zones_{0}', env.TF_WORKSPACE)] }}"
          echo "SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}"
          
      - name: Terraform Plan
        run: terraform plan -var "environment=${{ env.TF_WORKSPACE }}" -var "public_key_source=env" -var "my_ip=${{ env.MY_IP }}" -var "db_name=${{ env.DB_NAME }}" -var "db_username=${{ env.DB_USERNAME }}" -var "db_password=${{ env.DB_PASSWORD }}" -var "vpc_cidr=${{ env.VPC_CIDR }}" -var "subnet_cidrs=${{ env.SUBNET_CIDRS }}" -var "availability_zones=${{ env.AVAILABILITY_ZONES }}" -var "instance_type=${{ env.INSTANCE_TYPE }}" -out=tfplan
        env:
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_my_ip: ${{ env.MY_IP }}
          TF_VAR_db_password: ${{ env.DB_PASSWORD }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}